# -*- mode: ruby -*-
# vi: set ft=ruby :

$default_system_name = "GPP_" + Time.now.strftime("%m-%d-%Y_%H-%M")

$redhat_username = ENV['RH_USER'] || "<INSERT_USERNAME_HERE>"
$redhat_password = ENV['RH_PASSWORD'].to_s.empty? ? "<INSERT_PASSWORD_HERE>" : ENV['RH_PASSWORD']
$rhsn_system_name = ENV['RHSN_SYSTEM_NAME'].to_s.empty? ? $default_system_name : ENV['RHSN_SYSTEM_NAME']


Vagrant.configure("2") do |config|
  config.vm.box = "rhel-7.6"

  config.vm.provider "virtualbox" do |vb|
    # Customize the amount of memory on the VM:
    vb.memory = "4096"
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
  end

  if ENV['http_proxy']
    # Proxy Configuration
    config.vm.provision "shell" do |s|
      s.inline = 'sudo cp /vagrant/build_scripts/proxy.sh /etc/profile.d/'
    end

    config.vm.provision :reload
  end

  # RedHat Subscription Management
  config.vm.provision "shell" do |s|
    s.path = "build_scripts/subscription_manager.sh"
    s.args = [$redhat_username, $redhat_password, $rhsn_system_name]
  end

  config.vm.provision :reload

  config.vm.provision "shell" do |s|
    s.inline = 'sudo yum -y groupinstall "Development Tools" && echo "cd /vagrant" >> /home/vagrant/.bash_profile'
  end

  # Single server VM
  config.vm.define "default", primary: true do |default|
    default.vm.network "forwarded_port", guest: 80,   host: 10080
    default.vm.network "forwarded_port", guest: 443,  host: 10443
    default.vm.network "forwarded_port", guest: 5000, host: 10000
    default.vm.network "forwarded_port", guest: 5432, host: 10432
    default.vm.network "forwarded_port", guest: 8200, host: 10200
    default.vm.network "private_network", ip: "10.0.0.3"
    default.vm.provision "shell", path: "build_scripts/web_setup/web_setup.sh", args: 'single_server'
    default.vm.provision "shell", path: "build_scripts/es_setup/es_setup.sh", args: 'single_server'
    default.vm.provision "shell", path: "build_scripts/db_setup/db_setup.sh", args: 'single_server'
    default.vm.provision "shell", path: "build_scripts/app_setup/app_setup.sh"
    default.vm.provision "shell", path: "build_scripts/app_setup/setup_virtualenv.sh", privileged: false
  end


  config.trigger.before :destroy do |trigger|  # add more VMs if necessary
    $script = <<-SCRIPT
    subscription-manager unsubscribe --all; true
    subscription-manager unregister; true
    SCRIPT

    trigger.run_remote = { inline: $script }
    trigger.on_error = :continue
  end

end